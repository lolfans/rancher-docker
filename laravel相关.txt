laravel优质拓展包
https://xueyuanjun.com/books/laravel-packages


错误：oauth-private.key" does not exist 
解决： storage权限设置好everyone允许写入，然后 php artisan passport:install 

错误：No application encryption key has been specified.
解决：php artisan key:generate


restful api

//Route::resource('users', 'UsersController');

//上面代码将等同于：


//Route::get('/users', 'UsersController@index')->name('users.index');

//Route::get('/users/{user}', 'UsersController@show')->name('users.show');

//Route::get('/users/create', 'UsersController@create')->name('users.create');

//Route::post('/users', 'UsersController@store')->name('users.store');

//Route::get('/users/{user}/edit', 'UsersController@edit')->name('users.edit');

//Route::patch('/users/{user}', 'UsersController@update')->name('users.update');

//Route::delete('/users/{user}', 'UsersController@destroy')->name('users.destroy');


---------容器诞生的初级形态---------https://xueyuanjun.com/post/769.html
<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2020/4/27
 * Time: 10:42
 */

interface SuperModuleInterface
{
    /**
     * 超能力激活方法
     *
     * 任何一个超能力都得有该方法，并拥有一个参数
     *@param array $target 针对目标，可以是一个或多个，自己或他人
     */
    public function activate(array $target);
}


class Superman
{
    protected $module;

    public function __construct(SuperModuleInterface $module)
    {
        $this->module = $module;
    }
}


class XPower implements SuperModuleInterface
{
    public function activate(array $target)
    {
        // 这只是个例子。。具体自行脑补
    }
}


class UltraBomb implements SuperModuleInterface
{
    public function activate(array $target)
    {
        // 这只是个例子。。具体自行脑补
    }
}

class Container
{
    protected $binds;

    protected $instances;

    public function bind($abstract, $concrete)
    {
        if ($concrete instanceof Closure) {
            $this->binds[$abstract] = $concrete;
        } else {
            $this->instances[$abstract] = $concrete;
        }
        print_r($this->binds);
    }

    public function make($abstract, $parameters = [])
    {
        if (isset($this->instances[$abstract])) {
            return $this->instances[$abstract];
        }

        array_unshift($parameters, $this);

        return call_user_func_array($this->binds[$abstract], $parameters);
    }
}


// 创建一个容器（后面称作超级工厂）
$container = new Container;

// 向该 超级工厂添加超人的生产脚本
$container->bind('superman', function($container, $moduleName) {
    return new Superman($container->make($moduleName));
});





// 向该 超级工厂添加超能力模组的生产脚本
$container->bind('xpower', function($container) {
    return new XPower;
});

// 同上
$container->bind('ultrabomb', function($container) {
    return new UltraBomb;
});

// ****************** 华丽丽的分割线 **********************
// 开始启动生产
$superman_1 = $container->make('superman', ['xpower']);
$superman_2 = $container->make('superman', ['ultrabomb']);
//$superman_3 = $container->make('superman', 'xpower');
// ...随意添加
//print_r($container);

